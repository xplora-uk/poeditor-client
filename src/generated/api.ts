/* tslint:disable */
/* eslint-disable */
/**
 * API V2
 * Connect your software to POEditor with this simple API
 *
 * The version of the OpenAPI document: 1.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ContributorsListResponse
 */
export interface ContributorsListResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof ContributorsListResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {ContributorsListResponseAllOfResult}
     * @memberof ContributorsListResponse
     */
    'result'?: ContributorsListResponseAllOfResult;
}
/**
 * 
 * @export
 * @interface ContributorsListResponseAllOfResult
 */
export interface ContributorsListResponseAllOfResult {
    /**
     * 
     * @type {Array<ContributorsListResponseAllOfResultContributors>}
     * @memberof ContributorsListResponseAllOfResult
     */
    'contributors'?: Array<ContributorsListResponseAllOfResultContributors>;
}
/**
 * 
 * @export
 * @interface ContributorsListResponseAllOfResultContributors
 */
export interface ContributorsListResponseAllOfResultContributors {
    /**
     * 
     * @type {string}
     * @memberof ContributorsListResponseAllOfResultContributors
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContributorsListResponseAllOfResultContributors
     */
    'email'?: string;
    /**
     * 
     * @type {Array<ContributorsListResponseAllOfResultPermissions>}
     * @memberof ContributorsListResponseAllOfResultContributors
     */
    'permissions'?: Array<ContributorsListResponseAllOfResultPermissions>;
}
/**
 * 
 * @export
 * @interface ContributorsListResponseAllOfResultPermissions
 */
export interface ContributorsListResponseAllOfResultPermissions {
    /**
     * 
     * @type {ContributorsListResponseAllOfResultProject}
     * @memberof ContributorsListResponseAllOfResultPermissions
     */
    'project'?: ContributorsListResponseAllOfResultProject;
    /**
     * 
     * @type {string}
     * @memberof ContributorsListResponseAllOfResultPermissions
     */
    'type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ContributorsListResponseAllOfResultPermissions
     */
    'proofreader'?: boolean;
}
/**
 * 
 * @export
 * @interface ContributorsListResponseAllOfResultProject
 */
export interface ContributorsListResponseAllOfResultProject {
    /**
     * 
     * @type {string}
     * @memberof ContributorsListResponseAllOfResultProject
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContributorsListResponseAllOfResultProject
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface LanguagesListLong
 */
export interface LanguagesListLong {
    /**
     * 
     * @type {Array<LanguagesListLongLanguagesInner>}
     * @memberof LanguagesListLong
     */
    'languages'?: Array<LanguagesListLongLanguagesInner>;
}
/**
 * 
 * @export
 * @interface LanguagesListLongLanguagesInner
 */
export interface LanguagesListLongLanguagesInner {
    /**
     * 
     * @type {string}
     * @memberof LanguagesListLongLanguagesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof LanguagesListLongLanguagesInner
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof LanguagesListLongLanguagesInner
     */
    'translations'?: number;
    /**
     * 
     * @type {number}
     * @memberof LanguagesListLongLanguagesInner
     */
    'percentage'?: number;
    /**
     * 
     * @type {string}
     * @memberof LanguagesListLongLanguagesInner
     */
    'updated'?: string;
}
/**
 * 
 * @export
 * @interface LanguagesListLongResponse
 */
export interface LanguagesListLongResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof LanguagesListLongResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {LanguagesListLong}
     * @memberof LanguagesListLongResponse
     */
    'result'?: LanguagesListLong;
}
/**
 * 
 * @export
 * @interface LanguagesListShort
 */
export interface LanguagesListShort {
    /**
     * 
     * @type {Array<LanguagesListShortLanguagesInner>}
     * @memberof LanguagesListShort
     */
    'languages'?: Array<LanguagesListShortLanguagesInner>;
}
/**
 * 
 * @export
 * @interface LanguagesListShortLanguagesInner
 */
export interface LanguagesListShortLanguagesInner {
    /**
     * 
     * @type {string}
     * @memberof LanguagesListShortLanguagesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof LanguagesListShortLanguagesInner
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface LanguagesListShortResponse
 */
export interface LanguagesListShortResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof LanguagesListShortResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {LanguagesListShort}
     * @memberof LanguagesListShortResponse
     */
    'result'?: LanguagesListShort;
}
/**
 * 
 * @export
 * @interface ProjectExportResponse
 */
export interface ProjectExportResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof ProjectExportResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {ProjectExportResponseAllOfResult}
     * @memberof ProjectExportResponse
     */
    'result'?: ProjectExportResponseAllOfResult;
}
/**
 * 
 * @export
 * @interface ProjectExportResponseAllOfResult
 */
export interface ProjectExportResponseAllOfResult {
    /**
     * 
     * @type {string}
     * @memberof ProjectExportResponseAllOfResult
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface ProjectList
 */
export interface ProjectList {
    /**
     * 
     * @type {Array<ProjectListProjectsInner>}
     * @memberof ProjectList
     */
    'projects'?: Array<ProjectListProjectsInner>;
}
/**
 * 
 * @export
 * @interface ProjectListProjectsInner
 */
export interface ProjectListProjectsInner {
    /**
     * 
     * @type {number}
     * @memberof ProjectListProjectsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectListProjectsInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectListProjectsInner
     */
    'public'?: ProjectListProjectsInnerPublicEnum;
    /**
     * 
     * @type {number}
     * @memberof ProjectListProjectsInner
     */
    'open'?: ProjectListProjectsInnerOpenEnum;
    /**
     * 
     * @type {string}
     * @memberof ProjectListProjectsInner
     */
    'created'?: string;
}

export const ProjectListProjectsInnerPublicEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type ProjectListProjectsInnerPublicEnum = typeof ProjectListProjectsInnerPublicEnum[keyof typeof ProjectListProjectsInnerPublicEnum];
export const ProjectListProjectsInnerOpenEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type ProjectListProjectsInnerOpenEnum = typeof ProjectListProjectsInnerOpenEnum[keyof typeof ProjectListProjectsInnerOpenEnum];

/**
 * 
 * @export
 * @interface ProjectListResponse
 */
export interface ProjectListResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof ProjectListResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {ProjectList}
     * @memberof ProjectListResponse
     */
    'result'?: ProjectList;
}
/**
 * 
 * @export
 * @interface ProjectLong
 */
export interface ProjectLong {
    /**
     * 
     * @type {ProjectLongProject}
     * @memberof ProjectLong
     */
    'project'?: ProjectLongProject;
}
/**
 * 
 * @export
 * @interface ProjectLongProject
 */
export interface ProjectLongProject {
    /**
     * 
     * @type {number}
     * @memberof ProjectLongProject
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectLongProject
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectLongProject
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectLongProject
     */
    'public'?: ProjectLongProjectPublicEnum;
    /**
     * 
     * @type {number}
     * @memberof ProjectLongProject
     */
    'open'?: ProjectLongProjectOpenEnum;
    /**
     * 
     * @type {string}
     * @memberof ProjectLongProject
     */
    'reference'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectLongProject
     */
    'fallback_language'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectLongProject
     */
    'terms'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectLongProject
     */
    'created'?: string;
}

export const ProjectLongProjectPublicEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type ProjectLongProjectPublicEnum = typeof ProjectLongProjectPublicEnum[keyof typeof ProjectLongProjectPublicEnum];
export const ProjectLongProjectOpenEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type ProjectLongProjectOpenEnum = typeof ProjectLongProjectOpenEnum[keyof typeof ProjectLongProjectOpenEnum];

/**
 * 
 * @export
 * @interface ProjectSyncResponse
 */
export interface ProjectSyncResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof ProjectSyncResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {TermsFull}
     * @memberof ProjectSyncResponse
     */
    'result'?: TermsFull;
}
/**
 * 
 * @export
 * @interface ProjectUploadResponse
 */
export interface ProjectUploadResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof ProjectUploadResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {TermsTranslationsResponse}
     * @memberof ProjectUploadResponse
     */
    'result'?: TermsTranslationsResponse;
}
/**
 * 
 * @export
 * @interface ProjectViewResponse
 */
export interface ProjectViewResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof ProjectViewResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {ProjectLong}
     * @memberof ProjectViewResponse
     */
    'result'?: ProjectLong;
}
/**
 * 
 * @export
 * @interface Response
 */
export interface Response {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof Response
     */
    'response'?: ResponseResponse;
}
/**
 * 
 * @export
 * @interface ResponseResponse
 */
export interface ResponseResponse {
    /**
     * 
     * @type {string}
     * @memberof ResponseResponse
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseResponse
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface TermAddCommentResponse
 */
export interface TermAddCommentResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof TermAddCommentResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {TermsShortComment}
     * @memberof TermAddCommentResponse
     */
    'result'?: TermsShortComment;
}
/**
 * 
 * @export
 * @interface TermAddedResponse
 */
export interface TermAddedResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof TermAddedResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {TermsShortAdded}
     * @memberof TermAddedResponse
     */
    'result'?: TermsShortAdded;
}
/**
 * 
 * @export
 * @interface TermDeletedResponse
 */
export interface TermDeletedResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof TermDeletedResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {TermsShortDeleted}
     * @memberof TermDeletedResponse
     */
    'result'?: TermsShortDeleted;
}
/**
 * 
 * @export
 * @interface TermUpdatedResponse
 */
export interface TermUpdatedResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof TermUpdatedResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {TermsShortUpdated}
     * @memberof TermUpdatedResponse
     */
    'result'?: TermsShortUpdated;
}
/**
 * 
 * @export
 * @interface TermsFull
 */
export interface TermsFull {
    /**
     * 
     * @type {TermsFullTerms}
     * @memberof TermsFull
     */
    'terms'?: TermsFullTerms;
}
/**
 * 
 * @export
 * @interface TermsFullTerms
 */
export interface TermsFullTerms {
    /**
     * 
     * @type {number}
     * @memberof TermsFullTerms
     */
    'parsed'?: number;
    /**
     * 
     * @type {number}
     * @memberof TermsFullTerms
     */
    'added'?: number;
    /**
     * 
     * @type {number}
     * @memberof TermsFullTerms
     */
    'updated'?: number;
    /**
     * 
     * @type {number}
     * @memberof TermsFullTerms
     */
    'deleted'?: number;
}
/**
 * 
 * @export
 * @interface TermsListFull
 */
export interface TermsListFull {
    /**
     * 
     * @type {Array<TermsListFullTermsInner>}
     * @memberof TermsListFull
     */
    'terms'?: Array<TermsListFullTermsInner>;
}
/**
 * 
 * @export
 * @interface TermsListFullResponse
 */
export interface TermsListFullResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof TermsListFullResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {TermsListFull}
     * @memberof TermsListFullResponse
     */
    'result'?: TermsListFull;
}
/**
 * 
 * @export
 * @interface TermsListFullTermsInner
 */
export interface TermsListFullTermsInner {
    /**
     * 
     * @type {string}
     * @memberof TermsListFullTermsInner
     */
    'term'?: string;
    /**
     * 
     * @type {string}
     * @memberof TermsListFullTermsInner
     */
    'context'?: string;
    /**
     * 
     * @type {string}
     * @memberof TermsListFullTermsInner
     */
    'plural'?: string;
    /**
     * 
     * @type {string}
     * @memberof TermsListFullTermsInner
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof TermsListFullTermsInner
     */
    'updated'?: string;
    /**
     * 
     * @type {TermsListFullTermsInnerTranslation}
     * @memberof TermsListFullTermsInner
     */
    'translation'?: TermsListFullTermsInnerTranslation;
    /**
     * 
     * @type {string}
     * @memberof TermsListFullTermsInner
     */
    'reference'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TermsListFullTermsInner
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TermsListFullTermsInner
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface TermsListFullTermsInnerTranslation
 */
export interface TermsListFullTermsInnerTranslation {
    /**
     * 
     * @type {string}
     * @memberof TermsListFullTermsInnerTranslation
     */
    'content'?: string;
    /**
     * 
     * @type {number}
     * @memberof TermsListFullTermsInnerTranslation
     */
    'fuzzy'?: number;
    /**
     * 
     * @type {number}
     * @memberof TermsListFullTermsInnerTranslation
     */
    'proofread'?: number;
    /**
     * 
     * @type {string}
     * @memberof TermsListFullTermsInnerTranslation
     */
    'updated'?: string;
}
/**
 * 
 * @export
 * @interface TermsLong
 */
export interface TermsLong {
    /**
     * 
     * @type {TermsLongTerms}
     * @memberof TermsLong
     */
    'terms'?: TermsLongTerms;
}
/**
 * 
 * @export
 * @interface TermsLongTerms
 */
export interface TermsLongTerms {
    /**
     * 
     * @type {number}
     * @memberof TermsLongTerms
     */
    'parsed'?: number;
    /**
     * 
     * @type {number}
     * @memberof TermsLongTerms
     */
    'added'?: number;
    /**
     * 
     * @type {number}
     * @memberof TermsLongTerms
     */
    'deleted'?: number;
}
/**
 * 
 * @export
 * @interface TermsShortAdded
 */
export interface TermsShortAdded {
    /**
     * 
     * @type {TermsShortAddedTerms}
     * @memberof TermsShortAdded
     */
    'terms'?: TermsShortAddedTerms;
}
/**
 * 
 * @export
 * @interface TermsShortAddedTerms
 */
export interface TermsShortAddedTerms {
    /**
     * 
     * @type {number}
     * @memberof TermsShortAddedTerms
     */
    'parsed'?: number;
    /**
     * 
     * @type {number}
     * @memberof TermsShortAddedTerms
     */
    'added'?: number;
}
/**
 * 
 * @export
 * @interface TermsShortComment
 */
export interface TermsShortComment {
    /**
     * 
     * @type {TermsShortCommentTerms}
     * @memberof TermsShortComment
     */
    'terms'?: TermsShortCommentTerms;
}
/**
 * 
 * @export
 * @interface TermsShortCommentTerms
 */
export interface TermsShortCommentTerms {
    /**
     * 
     * @type {number}
     * @memberof TermsShortCommentTerms
     */
    'parsed'?: number;
    /**
     * 
     * @type {number}
     * @memberof TermsShortCommentTerms
     */
    'with_added_comment'?: number;
}
/**
 * 
 * @export
 * @interface TermsShortDeleted
 */
export interface TermsShortDeleted {
    /**
     * 
     * @type {TermsShortDeletedTerms}
     * @memberof TermsShortDeleted
     */
    'terms'?: TermsShortDeletedTerms;
}
/**
 * 
 * @export
 * @interface TermsShortDeletedTerms
 */
export interface TermsShortDeletedTerms {
    /**
     * 
     * @type {number}
     * @memberof TermsShortDeletedTerms
     */
    'parsed'?: number;
    /**
     * 
     * @type {number}
     * @memberof TermsShortDeletedTerms
     */
    'deleted'?: number;
}
/**
 * 
 * @export
 * @interface TermsShortUpdated
 */
export interface TermsShortUpdated {
    /**
     * 
     * @type {TermsShortUpdatedTerms}
     * @memberof TermsShortUpdated
     */
    'terms'?: TermsShortUpdatedTerms;
}
/**
 * 
 * @export
 * @interface TermsShortUpdatedTerms
 */
export interface TermsShortUpdatedTerms {
    /**
     * 
     * @type {number}
     * @memberof TermsShortUpdatedTerms
     */
    'parsed'?: number;
    /**
     * 
     * @type {number}
     * @memberof TermsShortUpdatedTerms
     */
    'updated'?: number;
}
/**
 * 
 * @export
 * @interface TermsTranslationsResponse
 */
export interface TermsTranslationsResponse {
    /**
     * 
     * @type {TermsLongTerms}
     * @memberof TermsTranslationsResponse
     */
    'terms'?: TermsLongTerms;
    /**
     * 
     * @type {TermsLongTerms}
     * @memberof TermsTranslationsResponse
     */
    'translations'?: TermsLongTerms;
}
/**
 * 
 * @export
 * @interface TranslationAddedResponse
 */
export interface TranslationAddedResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof TranslationAddedResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {TranslationsShortAdded}
     * @memberof TranslationAddedResponse
     */
    'result'?: TranslationsShortAdded;
}
/**
 * 
 * @export
 * @interface TranslationAutomatedResponse
 */
export interface TranslationAutomatedResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof TranslationAutomatedResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {TranslationsShortAutomated}
     * @memberof TranslationAutomatedResponse
     */
    'result'?: TranslationsShortAutomated;
}
/**
 * 
 * @export
 * @interface TranslationDeletedResponse
 */
export interface TranslationDeletedResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof TranslationDeletedResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {TranslationsShortDeleted}
     * @memberof TranslationDeletedResponse
     */
    'result'?: TranslationsShortDeleted;
}
/**
 * 
 * @export
 * @interface TranslationUpdatedResponse
 */
export interface TranslationUpdatedResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof TranslationUpdatedResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {TranslationsShortUpdated}
     * @memberof TranslationUpdatedResponse
     */
    'result'?: TranslationsShortUpdated;
}
/**
 * 
 * @export
 * @interface TranslationsLong
 */
export interface TranslationsLong {
    /**
     * 
     * @type {TermsLongTerms}
     * @memberof TranslationsLong
     */
    'translations'?: TermsLongTerms;
}
/**
 * 
 * @export
 * @interface TranslationsShort
 */
export interface TranslationsShort {
    /**
     * 
     * @type {TranslationsShortTranslations}
     * @memberof TranslationsShort
     */
    'translations'?: TranslationsShortTranslations;
}
/**
 * 
 * @export
 * @interface TranslationsShortAdded
 */
export interface TranslationsShortAdded {
    /**
     * 
     * @type {TermsShortAddedTerms}
     * @memberof TranslationsShortAdded
     */
    'translations'?: TermsShortAddedTerms;
}
/**
 * 
 * @export
 * @interface TranslationsShortAutomated
 */
export interface TranslationsShortAutomated {
    /**
     * 
     * @type {Array<TranslationsShortAutomatedSuccessfulInner>}
     * @memberof TranslationsShortAutomated
     */
    'successful'?: Array<TranslationsShortAutomatedSuccessfulInner>;
    /**
     * 
     * @type {Array<TranslationsShortAutomatedFailedInner>}
     * @memberof TranslationsShortAutomated
     */
    'failed'?: Array<TranslationsShortAutomatedFailedInner>;
}
/**
 * 
 * @export
 * @interface TranslationsShortAutomatedFailedInner
 */
export interface TranslationsShortAutomatedFailedInner {
    /**
     * 
     * @type {string}
     * @memberof TranslationsShortAutomatedFailedInner
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof TranslationsShortAutomatedFailedInner
     */
    'target'?: string;
    /**
     * 
     * @type {string}
     * @memberof TranslationsShortAutomatedFailedInner
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface TranslationsShortAutomatedSuccessfulInner
 */
export interface TranslationsShortAutomatedSuccessfulInner {
    /**
     * 
     * @type {string}
     * @memberof TranslationsShortAutomatedSuccessfulInner
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof TranslationsShortAutomatedSuccessfulInner
     */
    'target'?: string;
    /**
     * 
     * @type {number}
     * @memberof TranslationsShortAutomatedSuccessfulInner
     */
    'chars'?: number;
}
/**
 * 
 * @export
 * @interface TranslationsShortDeleted
 */
export interface TranslationsShortDeleted {
    /**
     * 
     * @type {TermsShortDeletedTerms}
     * @memberof TranslationsShortDeleted
     */
    'translations'?: TermsShortDeletedTerms;
}
/**
 * 
 * @export
 * @interface TranslationsShortResponse
 */
export interface TranslationsShortResponse {
    /**
     * 
     * @type {ResponseResponse}
     * @memberof TranslationsShortResponse
     */
    'response'?: ResponseResponse;
    /**
     * 
     * @type {TranslationsShort}
     * @memberof TranslationsShortResponse
     */
    'result'?: TranslationsShort;
}
/**
 * 
 * @export
 * @interface TranslationsShortTranslations
 */
export interface TranslationsShortTranslations {
    /**
     * 
     * @type {number}
     * @memberof TranslationsShortTranslations
     */
    'parsed'?: number;
    /**
     * 
     * @type {number}
     * @memberof TranslationsShortTranslations
     */
    'added'?: number;
    /**
     * 
     * @type {number}
     * @memberof TranslationsShortTranslations
     */
    'updated'?: number;
}
/**
 * 
 * @export
 * @interface TranslationsShortUpdated
 */
export interface TranslationsShortUpdated {
    /**
     * 
     * @type {TermsShortUpdatedTerms}
     * @memberof TranslationsShortUpdated
     */
    'translations'?: TermsShortUpdatedTerms;
}

/**
 * ContributorsApi - axios parameter creator
 * @export
 */
export const ContributorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add Contributor. More details in the [documentation](https://poeditor.com/docs/api#contributors_add).
         * @summary Adds a contributor to a project language or an administrator to a project.
         * @param {string} id The id of project
         * @param {string} name The name of contributor
         * @param {string} email The email of contributor
         * @param {string} [apiToken] 
         * @param {string} [language] The language code (Required if adding a contributor)
         * @param {ContributorsAddAdminEnum} [admin] Set it to 1 for adding as administrator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contributorsAdd: async (id: string, name: string, email: string, apiToken?: string, language?: string, admin?: ContributorsAddAdminEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contributorsAdd', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('contributorsAdd', 'name', name)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('contributorsAdd', 'email', email)
            const localVarPath = `/contributors/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.set('language', language as any);
            }
    
            if (admin !== undefined) { 
                localVarFormParams.set('admin', admin as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove Contributor. More details in the [documentation](https://poeditor.com/docs/api#contributors_remove).
         * @summary Removes a contributor from a project language or an admin from a project, if the language is not specified.
         * @param {string} id The id of project
         * @param {string} email The email of contributor
         * @param {string} [apiToken] 
         * @param {string} [language] The language code (Required if removing a contributor from a certain language)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contributorsRemove: async (id: string, email: string, apiToken?: string, language?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contributorsRemove', 'id', id)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('contributorsRemove', 'email', email)
            const localVarPath = `/contributors/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.set('language', language as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Contributors. More details in the [documentation](https://poeditor.com/docs/api#contributors_list).
         * @summary Returns the list of contributors from your projects.
         * @param {string} [apiToken] 
         * @param {string} [id] The id of project (Optional, unless language is set. Then, it becomes required)
         * @param {string} [language] The language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationsList: async (apiToken?: string, id?: string, language?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contributors/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.set('language', language as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContributorsApi - functional programming interface
 * @export
 */
export const ContributorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContributorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add Contributor. More details in the [documentation](https://poeditor.com/docs/api#contributors_add).
         * @summary Adds a contributor to a project language or an administrator to a project.
         * @param {string} id The id of project
         * @param {string} name The name of contributor
         * @param {string} email The email of contributor
         * @param {string} [apiToken] 
         * @param {string} [language] The language code (Required if adding a contributor)
         * @param {ContributorsAddAdminEnum} [admin] Set it to 1 for adding as administrator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contributorsAdd(id: string, name: string, email: string, apiToken?: string, language?: string, admin?: ContributorsAddAdminEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contributorsAdd(id, name, email, apiToken, language, admin, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContributorsApi.contributorsAdd']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove Contributor. More details in the [documentation](https://poeditor.com/docs/api#contributors_remove).
         * @summary Removes a contributor from a project language or an admin from a project, if the language is not specified.
         * @param {string} id The id of project
         * @param {string} email The email of contributor
         * @param {string} [apiToken] 
         * @param {string} [language] The language code (Required if removing a contributor from a certain language)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contributorsRemove(id: string, email: string, apiToken?: string, language?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contributorsRemove(id, email, apiToken, language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContributorsApi.contributorsRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List Contributors. More details in the [documentation](https://poeditor.com/docs/api#contributors_list).
         * @summary Returns the list of contributors from your projects.
         * @param {string} [apiToken] 
         * @param {string} [id] The id of project (Optional, unless language is set. Then, it becomes required)
         * @param {string} [language] The language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async translationsList(apiToken?: string, id?: string, language?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContributorsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.translationsList(apiToken, id, language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContributorsApi.translationsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContributorsApi - factory interface
 * @export
 */
export const ContributorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContributorsApiFp(configuration)
    return {
        /**
         * Add Contributor. More details in the [documentation](https://poeditor.com/docs/api#contributors_add).
         * @summary Adds a contributor to a project language or an administrator to a project.
         * @param {string} id The id of project
         * @param {string} name The name of contributor
         * @param {string} email The email of contributor
         * @param {string} [apiToken] 
         * @param {string} [language] The language code (Required if adding a contributor)
         * @param {ContributorsAddAdminEnum} [admin] Set it to 1 for adding as administrator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contributorsAdd(id: string, name: string, email: string, apiToken?: string, language?: string, admin?: ContributorsAddAdminEnum, options?: any): AxiosPromise<Response> {
            return localVarFp.contributorsAdd(id, name, email, apiToken, language, admin, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove Contributor. More details in the [documentation](https://poeditor.com/docs/api#contributors_remove).
         * @summary Removes a contributor from a project language or an admin from a project, if the language is not specified.
         * @param {string} id The id of project
         * @param {string} email The email of contributor
         * @param {string} [apiToken] 
         * @param {string} [language] The language code (Required if removing a contributor from a certain language)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contributorsRemove(id: string, email: string, apiToken?: string, language?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.contributorsRemove(id, email, apiToken, language, options).then((request) => request(axios, basePath));
        },
        /**
         * List Contributors. More details in the [documentation](https://poeditor.com/docs/api#contributors_list).
         * @summary Returns the list of contributors from your projects.
         * @param {string} [apiToken] 
         * @param {string} [id] The id of project (Optional, unless language is set. Then, it becomes required)
         * @param {string} [language] The language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationsList(apiToken?: string, id?: string, language?: string, options?: any): AxiosPromise<ContributorsListResponse> {
            return localVarFp.translationsList(apiToken, id, language, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContributorsApi - object-oriented interface
 * @export
 * @class ContributorsApi
 * @extends {BaseAPI}
 */
export class ContributorsApi extends BaseAPI {
    /**
     * Add Contributor. More details in the [documentation](https://poeditor.com/docs/api#contributors_add).
     * @summary Adds a contributor to a project language or an administrator to a project.
     * @param {string} id The id of project
     * @param {string} name The name of contributor
     * @param {string} email The email of contributor
     * @param {string} [apiToken] 
     * @param {string} [language] The language code (Required if adding a contributor)
     * @param {ContributorsAddAdminEnum} [admin] Set it to 1 for adding as administrator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContributorsApi
     */
    public contributorsAdd(id: string, name: string, email: string, apiToken?: string, language?: string, admin?: ContributorsAddAdminEnum, options?: RawAxiosRequestConfig) {
        return ContributorsApiFp(this.configuration).contributorsAdd(id, name, email, apiToken, language, admin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove Contributor. More details in the [documentation](https://poeditor.com/docs/api#contributors_remove).
     * @summary Removes a contributor from a project language or an admin from a project, if the language is not specified.
     * @param {string} id The id of project
     * @param {string} email The email of contributor
     * @param {string} [apiToken] 
     * @param {string} [language] The language code (Required if removing a contributor from a certain language)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContributorsApi
     */
    public contributorsRemove(id: string, email: string, apiToken?: string, language?: string, options?: RawAxiosRequestConfig) {
        return ContributorsApiFp(this.configuration).contributorsRemove(id, email, apiToken, language, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Contributors. More details in the [documentation](https://poeditor.com/docs/api#contributors_list).
     * @summary Returns the list of contributors from your projects.
     * @param {string} [apiToken] 
     * @param {string} [id] The id of project (Optional, unless language is set. Then, it becomes required)
     * @param {string} [language] The language code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContributorsApi
     */
    public translationsList(apiToken?: string, id?: string, language?: string, options?: RawAxiosRequestConfig) {
        return ContributorsApiFp(this.configuration).translationsList(apiToken, id, language, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ContributorsAddAdminEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type ContributorsAddAdminEnum = typeof ContributorsAddAdminEnum[keyof typeof ContributorsAddAdminEnum];


/**
 * LanguagesApi - axios parameter creator
 * @export
 */
export const LanguagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add Language to Project. More details in the [documentation](https://poeditor.com/docs/api#languages_add).
         * @summary Adds a new language to project.
         * @param {number} id 
         * @param {string} language 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesAdd: async (id: number, language: string, apiToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('languagesAdd', 'id', id)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('languagesAdd', 'language', language)
            const localVarPath = `/languages/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.set('language', language as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Language from Project. More details in the [documentation](https://poeditor.com/docs/api#languages_delete).
         * @summary Deletes existing language from project.
         * @param {number} id 
         * @param {string} language 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesDelete: async (id: number, language: string, apiToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('languagesDelete', 'id', id)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('languagesDelete', 'language', language)
            const localVarPath = `/languages/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.set('language', language as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Languages. More details in the [documentation](https://poeditor.com/docs/api#languages_list).
         * @summary Returns project languages, percentage of translation done for each and the datetime (UTC - ISO 8601) when the last change was made.
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesList: async (id: number, apiToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('languagesList', 'id', id)
            const localVarPath = `/languages/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Project Language. More details in the [documentation](https://poeditor.com/docs/api#languages_update).
         * @summary Inserts / overwrites translations.
         * @param {number} id 
         * @param {string} language The language code
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {LanguagesUpdateFuzzyTriggerEnum} [fuzzyTrigger] Set it to 1 to mark corresponding translations from the other languages as fuzzy for the updated values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesUpdate: async (id: number, language: string, data: string, apiToken?: string, fuzzyTrigger?: LanguagesUpdateFuzzyTriggerEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('languagesUpdate', 'id', id)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('languagesUpdate', 'language', language)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('languagesUpdate', 'data', data)
            const localVarPath = `/languages/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.set('language', language as any);
            }
    
            if (fuzzyTrigger !== undefined) { 
                localVarFormParams.set('fuzzy_trigger', fuzzyTrigger as any);
            }
    
            if (data !== undefined) { 
                localVarFormParams.set('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Languages. More details in the [documentation](https://poeditor.com/docs/api#languages_available).
         * @summary Returns project languages, percentage of translation done for each and the datetime (UTC - ISO 8601) when the last change was made.
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsAvailable: async (id: number, apiToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsAvailable', 'id', id)
            const localVarPath = `/languages/available`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LanguagesApi - functional programming interface
 * @export
 */
export const LanguagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LanguagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add Language to Project. More details in the [documentation](https://poeditor.com/docs/api#languages_add).
         * @summary Adds a new language to project.
         * @param {number} id 
         * @param {string} language 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async languagesAdd(id: number, language: string, apiToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.languagesAdd(id, language, apiToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LanguagesApi.languagesAdd']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Language from Project. More details in the [documentation](https://poeditor.com/docs/api#languages_delete).
         * @summary Deletes existing language from project.
         * @param {number} id 
         * @param {string} language 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async languagesDelete(id: number, language: string, apiToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.languagesDelete(id, language, apiToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LanguagesApi.languagesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List Languages. More details in the [documentation](https://poeditor.com/docs/api#languages_list).
         * @summary Returns project languages, percentage of translation done for each and the datetime (UTC - ISO 8601) when the last change was made.
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async languagesList(id: number, apiToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguagesListLongResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.languagesList(id, apiToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LanguagesApi.languagesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Project Language. More details in the [documentation](https://poeditor.com/docs/api#languages_update).
         * @summary Inserts / overwrites translations.
         * @param {number} id 
         * @param {string} language The language code
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {LanguagesUpdateFuzzyTriggerEnum} [fuzzyTrigger] Set it to 1 to mark corresponding translations from the other languages as fuzzy for the updated values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async languagesUpdate(id: number, language: string, data: string, apiToken?: string, fuzzyTrigger?: LanguagesUpdateFuzzyTriggerEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TranslationsShortResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.languagesUpdate(id, language, data, apiToken, fuzzyTrigger, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LanguagesApi.languagesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List Languages. More details in the [documentation](https://poeditor.com/docs/api#languages_available).
         * @summary Returns project languages, percentage of translation done for each and the datetime (UTC - ISO 8601) when the last change was made.
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsAvailable(id: number, apiToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguagesListShortResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsAvailable(id, apiToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LanguagesApi.projectsAvailable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LanguagesApi - factory interface
 * @export
 */
export const LanguagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LanguagesApiFp(configuration)
    return {
        /**
         * Add Language to Project. More details in the [documentation](https://poeditor.com/docs/api#languages_add).
         * @summary Adds a new language to project.
         * @param {number} id 
         * @param {string} language 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesAdd(id: number, language: string, apiToken?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.languagesAdd(id, language, apiToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Language from Project. More details in the [documentation](https://poeditor.com/docs/api#languages_delete).
         * @summary Deletes existing language from project.
         * @param {number} id 
         * @param {string} language 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesDelete(id: number, language: string, apiToken?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.languagesDelete(id, language, apiToken, options).then((request) => request(axios, basePath));
        },
        /**
         * List Languages. More details in the [documentation](https://poeditor.com/docs/api#languages_list).
         * @summary Returns project languages, percentage of translation done for each and the datetime (UTC - ISO 8601) when the last change was made.
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesList(id: number, apiToken?: string, options?: any): AxiosPromise<LanguagesListLongResponse> {
            return localVarFp.languagesList(id, apiToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Project Language. More details in the [documentation](https://poeditor.com/docs/api#languages_update).
         * @summary Inserts / overwrites translations.
         * @param {number} id 
         * @param {string} language The language code
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {LanguagesUpdateFuzzyTriggerEnum} [fuzzyTrigger] Set it to 1 to mark corresponding translations from the other languages as fuzzy for the updated values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesUpdate(id: number, language: string, data: string, apiToken?: string, fuzzyTrigger?: LanguagesUpdateFuzzyTriggerEnum, options?: any): AxiosPromise<TranslationsShortResponse> {
            return localVarFp.languagesUpdate(id, language, data, apiToken, fuzzyTrigger, options).then((request) => request(axios, basePath));
        },
        /**
         * List Languages. More details in the [documentation](https://poeditor.com/docs/api#languages_available).
         * @summary Returns project languages, percentage of translation done for each and the datetime (UTC - ISO 8601) when the last change was made.
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsAvailable(id: number, apiToken?: string, options?: any): AxiosPromise<LanguagesListShortResponse> {
            return localVarFp.projectsAvailable(id, apiToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LanguagesApi - object-oriented interface
 * @export
 * @class LanguagesApi
 * @extends {BaseAPI}
 */
export class LanguagesApi extends BaseAPI {
    /**
     * Add Language to Project. More details in the [documentation](https://poeditor.com/docs/api#languages_add).
     * @summary Adds a new language to project.
     * @param {number} id 
     * @param {string} language 
     * @param {string} [apiToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public languagesAdd(id: number, language: string, apiToken?: string, options?: RawAxiosRequestConfig) {
        return LanguagesApiFp(this.configuration).languagesAdd(id, language, apiToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Language from Project. More details in the [documentation](https://poeditor.com/docs/api#languages_delete).
     * @summary Deletes existing language from project.
     * @param {number} id 
     * @param {string} language 
     * @param {string} [apiToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public languagesDelete(id: number, language: string, apiToken?: string, options?: RawAxiosRequestConfig) {
        return LanguagesApiFp(this.configuration).languagesDelete(id, language, apiToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Languages. More details in the [documentation](https://poeditor.com/docs/api#languages_list).
     * @summary Returns project languages, percentage of translation done for each and the datetime (UTC - ISO 8601) when the last change was made.
     * @param {number} id 
     * @param {string} [apiToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public languagesList(id: number, apiToken?: string, options?: RawAxiosRequestConfig) {
        return LanguagesApiFp(this.configuration).languagesList(id, apiToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Project Language. More details in the [documentation](https://poeditor.com/docs/api#languages_update).
     * @summary Inserts / overwrites translations.
     * @param {number} id 
     * @param {string} language The language code
     * @param {string} data JSON format
     * @param {string} [apiToken] 
     * @param {LanguagesUpdateFuzzyTriggerEnum} [fuzzyTrigger] Set it to 1 to mark corresponding translations from the other languages as fuzzy for the updated values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public languagesUpdate(id: number, language: string, data: string, apiToken?: string, fuzzyTrigger?: LanguagesUpdateFuzzyTriggerEnum, options?: RawAxiosRequestConfig) {
        return LanguagesApiFp(this.configuration).languagesUpdate(id, language, data, apiToken, fuzzyTrigger, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Languages. More details in the [documentation](https://poeditor.com/docs/api#languages_available).
     * @summary Returns project languages, percentage of translation done for each and the datetime (UTC - ISO 8601) when the last change was made.
     * @param {number} id 
     * @param {string} [apiToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public projectsAvailable(id: number, apiToken?: string, options?: RawAxiosRequestConfig) {
        return LanguagesApiFp(this.configuration).projectsAvailable(id, apiToken, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const LanguagesUpdateFuzzyTriggerEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type LanguagesUpdateFuzzyTriggerEnum = typeof LanguagesUpdateFuzzyTriggerEnum[keyof typeof LanguagesUpdateFuzzyTriggerEnum];


/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add Project. More details in the [documentation](https://poeditor.com/docs/api#projects_add).
         * @summary Creates a new project. Returns project details (if successful).
         * @param {string} name 
         * @param {string} [apiToken] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsAdd: async (name: string, apiToken?: string, description?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('projectsAdd', 'name', name)
            const localVarPath = `/projects/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.set('description', description as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Project. More details in the [documentation](https://poeditor.com/docs/api#projects_delete).
         * @summary Deletes the project from the account. You must be the owner of the project.
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsDelete: async (id: number, apiToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsDelete', 'id', id)
            const localVarPath = `/projects/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export. More details in the [documentation](https://poeditor.com/docs/api#projects_export).
         * @summary Returns the link of the file (expires after 10 minutes). The settings inherited from the project will be the ones at the time of the download.
         * @param {number} id 
         * @param {string} language 
         * @param {ProjectsExportTypeEnum} type 
         * @param {string} [apiToken] 
         * @param {string} [filters] 
         * @param {string} [order] 
         * @param {string} [tags] 
         * @param {string} [_options] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsExport: async (id: number, language: string, type: ProjectsExportTypeEnum, apiToken?: string, filters?: string, order?: string, tags?: string, _options?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsExport', 'id', id)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('projectsExport', 'language', language)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('projectsExport', 'type', type)
            const localVarPath = `/projects/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.set('language', language as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.set('type', type as any);
            }
    
            if (filters !== undefined) { 
                localVarFormParams.set('filters', filters as any);
            }
    
            if (order !== undefined) { 
                localVarFormParams.set('order', order as any);
            }
    
            if (tags !== undefined) { 
                localVarFormParams.set('tags', tags as any);
            }
    
            if (_options !== undefined) { 
                localVarFormParams.set('options', _options as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Projects. More details in the [documentation](https://poeditor.com/docs/api#projects_list).
         * @summary Returns the list of projects owned by user.
         * @param {string} apiToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsList: async (apiToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiToken' is not null or undefined
            assertParamExists('projectsList', 'apiToken', apiToken)
            const localVarPath = `/projects/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sync Terms. More details in the [documentation](https://poeditor.com/docs/api#projects_sync).
         * @summary Syncs your project with the array you send (terms that are not found in the JSON object will be deleted from project and the new ones added). Please use with caution. If wrong data is sent, existing terms and their translations might be irreversibly lost.
         * @param {number} id 
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSync: async (id: number, data: string, apiToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsSync', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('projectsSync', 'data', data)
            const localVarPath = `/projects/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (data !== undefined) { 
                localVarFormParams.set('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Project Settings. More details in the [documentation](https://poeditor.com/docs/api#projects_update).
         * @summary Updates project settings (name, description, reference language, fallback language). If optional parameters are not sent, their respective fields are not updated.
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [referenceLanguage] 
         * @param {string} [fallbackLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsUpdate: async (id: number, apiToken?: string, name?: string, description?: string, referenceLanguage?: string, fallbackLanguage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsUpdate', 'id', id)
            const localVarPath = `/projects/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.set('description', description as any);
            }
    
            if (referenceLanguage !== undefined) { 
                localVarFormParams.set('reference_language', referenceLanguage as any);
            }
    
            if (fallbackLanguage !== undefined) { 
                localVarFormParams.set('fallback_language', fallbackLanguage as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload. More details in the [documentation](https://poeditor.com/docs/api#projects_upload).
         * @summary Updates terms / translations - No more than one request every 20 seconds.
         * @param {ProjectsUploadUpdatingEnum} updating 
         * @param {File} file Uploaded file (.po, .xls or any of the supported file formats)
         * @param {string} [apiToken] 
         * @param {number} [id] 
         * @param {string} [language] The language code (Required only if &#x60;updating&#x60; is terms_translations or translations)
         * @param {ProjectsUploadOverwriteEnum} [overwrite] Set it to 1 if you want to overwrite translations
         * @param {ProjectsUploadSyncTermsEnum} [syncTerms] Set it to 1 if you want to sync your terms (terms that are not found in the uploaded file will be deleted from project and the new ones added). Ignored if &#x60;updating&#x60; &#x3D; translations.
         * @param {string} [tags] Add tags to the project terms; available when updating terms or terms_translations; you can use the following keys: \\\&quot;all\\\&quot; - for the all the imported terms, \\\&quot;new\\\&quot; - for the terms which arent already in the project, \\\&quot;obsolete\\\&quot; - for the terms which are in the project but not in the imported file and \\\&quot;overwritten_translations\\\&quot; - for the terms for which translations change
         * @param {ProjectsUploadReadFromSourceEnum} [readFromSource] For .xliff format only - set it to 1 if you want to import translations from the source tag
         * @param {ProjectsUploadFuzzyTriggerEnum} [fuzzyTrigger] Set it to 1 to mark corresponding translations from the other languages as fuzzy for the updated values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsUpload: async (updating: ProjectsUploadUpdatingEnum, file: File, apiToken?: string, id?: number, language?: string, overwrite?: ProjectsUploadOverwriteEnum, syncTerms?: ProjectsUploadSyncTermsEnum, tags?: string, readFromSource?: ProjectsUploadReadFromSourceEnum, fuzzyTrigger?: ProjectsUploadFuzzyTriggerEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updating' is not null or undefined
            assertParamExists('projectsUpload', 'updating', updating)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('projectsUpload', 'file', file)
            const localVarPath = `/projects/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (apiToken !== undefined) { 
                localVarFormParams.append('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }
    
            if (updating !== undefined) { 
                localVarFormParams.append('updating', updating as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.append('language', language as any);
            }
    
            if (overwrite !== undefined) { 
                localVarFormParams.append('overwrite', overwrite as any);
            }
    
            if (syncTerms !== undefined) { 
                localVarFormParams.append('sync_terms', syncTerms as any);
            }
    
            if (tags !== undefined) { 
                localVarFormParams.append('tags', tags as any);
            }
    
            if (readFromSource !== undefined) { 
                localVarFormParams.append('read_from_source', readFromSource as any);
            }
    
            if (fuzzyTrigger !== undefined) { 
                localVarFormParams.append('fuzzy_trigger', fuzzyTrigger as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * View Project Details. More details in the [documentation](https://poeditor.com/docs/api#projects_view).
         * @summary Returns projects details
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsView: async (id: number, apiToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsView', 'id', id)
            const localVarPath = `/projects/view`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add Project. More details in the [documentation](https://poeditor.com/docs/api#projects_add).
         * @summary Creates a new project. Returns project details (if successful).
         * @param {string} name 
         * @param {string} [apiToken] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsAdd(name: string, apiToken?: string, description?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectViewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsAdd(name, apiToken, description, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsAdd']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Project. More details in the [documentation](https://poeditor.com/docs/api#projects_delete).
         * @summary Deletes the project from the account. You must be the owner of the project.
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsDelete(id: number, apiToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsDelete(id, apiToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Export. More details in the [documentation](https://poeditor.com/docs/api#projects_export).
         * @summary Returns the link of the file (expires after 10 minutes). The settings inherited from the project will be the ones at the time of the download.
         * @param {number} id 
         * @param {string} language 
         * @param {ProjectsExportTypeEnum} type 
         * @param {string} [apiToken] 
         * @param {string} [filters] 
         * @param {string} [order] 
         * @param {string} [tags] 
         * @param {string} [_options] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsExport(id: number, language: string, type: ProjectsExportTypeEnum, apiToken?: string, filters?: string, order?: string, tags?: string, _options?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectExportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsExport(id, language, type, apiToken, filters, order, tags, _options, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsExport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List Projects. More details in the [documentation](https://poeditor.com/docs/api#projects_list).
         * @summary Returns the list of projects owned by user.
         * @param {string} apiToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsList(apiToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsList(apiToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sync Terms. More details in the [documentation](https://poeditor.com/docs/api#projects_sync).
         * @summary Syncs your project with the array you send (terms that are not found in the JSON object will be deleted from project and the new ones added). Please use with caution. If wrong data is sent, existing terms and their translations might be irreversibly lost.
         * @param {number} id 
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsSync(id: number, data: string, apiToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectSyncResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsSync(id, data, apiToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsSync']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Project Settings. More details in the [documentation](https://poeditor.com/docs/api#projects_update).
         * @summary Updates project settings (name, description, reference language, fallback language). If optional parameters are not sent, their respective fields are not updated.
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [referenceLanguage] 
         * @param {string} [fallbackLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsUpdate(id: number, apiToken?: string, name?: string, description?: string, referenceLanguage?: string, fallbackLanguage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectViewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsUpdate(id, apiToken, name, description, referenceLanguage, fallbackLanguage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload. More details in the [documentation](https://poeditor.com/docs/api#projects_upload).
         * @summary Updates terms / translations - No more than one request every 20 seconds.
         * @param {ProjectsUploadUpdatingEnum} updating 
         * @param {File} file Uploaded file (.po, .xls or any of the supported file formats)
         * @param {string} [apiToken] 
         * @param {number} [id] 
         * @param {string} [language] The language code (Required only if &#x60;updating&#x60; is terms_translations or translations)
         * @param {ProjectsUploadOverwriteEnum} [overwrite] Set it to 1 if you want to overwrite translations
         * @param {ProjectsUploadSyncTermsEnum} [syncTerms] Set it to 1 if you want to sync your terms (terms that are not found in the uploaded file will be deleted from project and the new ones added). Ignored if &#x60;updating&#x60; &#x3D; translations.
         * @param {string} [tags] Add tags to the project terms; available when updating terms or terms_translations; you can use the following keys: \\\&quot;all\\\&quot; - for the all the imported terms, \\\&quot;new\\\&quot; - for the terms which arent already in the project, \\\&quot;obsolete\\\&quot; - for the terms which are in the project but not in the imported file and \\\&quot;overwritten_translations\\\&quot; - for the terms for which translations change
         * @param {ProjectsUploadReadFromSourceEnum} [readFromSource] For .xliff format only - set it to 1 if you want to import translations from the source tag
         * @param {ProjectsUploadFuzzyTriggerEnum} [fuzzyTrigger] Set it to 1 to mark corresponding translations from the other languages as fuzzy for the updated values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsUpload(updating: ProjectsUploadUpdatingEnum, file: File, apiToken?: string, id?: number, language?: string, overwrite?: ProjectsUploadOverwriteEnum, syncTerms?: ProjectsUploadSyncTermsEnum, tags?: string, readFromSource?: ProjectsUploadReadFromSourceEnum, fuzzyTrigger?: ProjectsUploadFuzzyTriggerEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectUploadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsUpload(updating, file, apiToken, id, language, overwrite, syncTerms, tags, readFromSource, fuzzyTrigger, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsUpload']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * View Project Details. More details in the [documentation](https://poeditor.com/docs/api#projects_view).
         * @summary Returns projects details
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsView(id: number, apiToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectViewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsView(id, apiToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectsApi.projectsView']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * Add Project. More details in the [documentation](https://poeditor.com/docs/api#projects_add).
         * @summary Creates a new project. Returns project details (if successful).
         * @param {string} name 
         * @param {string} [apiToken] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsAdd(name: string, apiToken?: string, description?: string, options?: any): AxiosPromise<ProjectViewResponse> {
            return localVarFp.projectsAdd(name, apiToken, description, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Project. More details in the [documentation](https://poeditor.com/docs/api#projects_delete).
         * @summary Deletes the project from the account. You must be the owner of the project.
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsDelete(id: number, apiToken?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.projectsDelete(id, apiToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Export. More details in the [documentation](https://poeditor.com/docs/api#projects_export).
         * @summary Returns the link of the file (expires after 10 minutes). The settings inherited from the project will be the ones at the time of the download.
         * @param {number} id 
         * @param {string} language 
         * @param {ProjectsExportTypeEnum} type 
         * @param {string} [apiToken] 
         * @param {string} [filters] 
         * @param {string} [order] 
         * @param {string} [tags] 
         * @param {string} [_options] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsExport(id: number, language: string, type: ProjectsExportTypeEnum, apiToken?: string, filters?: string, order?: string, tags?: string, _options?: string, options?: any): AxiosPromise<ProjectExportResponse> {
            return localVarFp.projectsExport(id, language, type, apiToken, filters, order, tags, _options, options).then((request) => request(axios, basePath));
        },
        /**
         * List Projects. More details in the [documentation](https://poeditor.com/docs/api#projects_list).
         * @summary Returns the list of projects owned by user.
         * @param {string} apiToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsList(apiToken: string, options?: any): AxiosPromise<ProjectListResponse> {
            return localVarFp.projectsList(apiToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Sync Terms. More details in the [documentation](https://poeditor.com/docs/api#projects_sync).
         * @summary Syncs your project with the array you send (terms that are not found in the JSON object will be deleted from project and the new ones added). Please use with caution. If wrong data is sent, existing terms and their translations might be irreversibly lost.
         * @param {number} id 
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsSync(id: number, data: string, apiToken?: string, options?: any): AxiosPromise<ProjectSyncResponse> {
            return localVarFp.projectsSync(id, data, apiToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Project Settings. More details in the [documentation](https://poeditor.com/docs/api#projects_update).
         * @summary Updates project settings (name, description, reference language, fallback language). If optional parameters are not sent, their respective fields are not updated.
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [referenceLanguage] 
         * @param {string} [fallbackLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsUpdate(id: number, apiToken?: string, name?: string, description?: string, referenceLanguage?: string, fallbackLanguage?: string, options?: any): AxiosPromise<ProjectViewResponse> {
            return localVarFp.projectsUpdate(id, apiToken, name, description, referenceLanguage, fallbackLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload. More details in the [documentation](https://poeditor.com/docs/api#projects_upload).
         * @summary Updates terms / translations - No more than one request every 20 seconds.
         * @param {ProjectsUploadUpdatingEnum} updating 
         * @param {File} file Uploaded file (.po, .xls or any of the supported file formats)
         * @param {string} [apiToken] 
         * @param {number} [id] 
         * @param {string} [language] The language code (Required only if &#x60;updating&#x60; is terms_translations or translations)
         * @param {ProjectsUploadOverwriteEnum} [overwrite] Set it to 1 if you want to overwrite translations
         * @param {ProjectsUploadSyncTermsEnum} [syncTerms] Set it to 1 if you want to sync your terms (terms that are not found in the uploaded file will be deleted from project and the new ones added). Ignored if &#x60;updating&#x60; &#x3D; translations.
         * @param {string} [tags] Add tags to the project terms; available when updating terms or terms_translations; you can use the following keys: \\\&quot;all\\\&quot; - for the all the imported terms, \\\&quot;new\\\&quot; - for the terms which arent already in the project, \\\&quot;obsolete\\\&quot; - for the terms which are in the project but not in the imported file and \\\&quot;overwritten_translations\\\&quot; - for the terms for which translations change
         * @param {ProjectsUploadReadFromSourceEnum} [readFromSource] For .xliff format only - set it to 1 if you want to import translations from the source tag
         * @param {ProjectsUploadFuzzyTriggerEnum} [fuzzyTrigger] Set it to 1 to mark corresponding translations from the other languages as fuzzy for the updated values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsUpload(updating: ProjectsUploadUpdatingEnum, file: File, apiToken?: string, id?: number, language?: string, overwrite?: ProjectsUploadOverwriteEnum, syncTerms?: ProjectsUploadSyncTermsEnum, tags?: string, readFromSource?: ProjectsUploadReadFromSourceEnum, fuzzyTrigger?: ProjectsUploadFuzzyTriggerEnum, options?: any): AxiosPromise<ProjectUploadResponse> {
            return localVarFp.projectsUpload(updating, file, apiToken, id, language, overwrite, syncTerms, tags, readFromSource, fuzzyTrigger, options).then((request) => request(axios, basePath));
        },
        /**
         * View Project Details. More details in the [documentation](https://poeditor.com/docs/api#projects_view).
         * @summary Returns projects details
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsView(id: number, apiToken?: string, options?: any): AxiosPromise<ProjectViewResponse> {
            return localVarFp.projectsView(id, apiToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * Add Project. More details in the [documentation](https://poeditor.com/docs/api#projects_add).
     * @summary Creates a new project. Returns project details (if successful).
     * @param {string} name 
     * @param {string} [apiToken] 
     * @param {string} [description] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsAdd(name: string, apiToken?: string, description?: string, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsAdd(name, apiToken, description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Project. More details in the [documentation](https://poeditor.com/docs/api#projects_delete).
     * @summary Deletes the project from the account. You must be the owner of the project.
     * @param {number} id 
     * @param {string} [apiToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsDelete(id: number, apiToken?: string, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsDelete(id, apiToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export. More details in the [documentation](https://poeditor.com/docs/api#projects_export).
     * @summary Returns the link of the file (expires after 10 minutes). The settings inherited from the project will be the ones at the time of the download.
     * @param {number} id 
     * @param {string} language 
     * @param {ProjectsExportTypeEnum} type 
     * @param {string} [apiToken] 
     * @param {string} [filters] 
     * @param {string} [order] 
     * @param {string} [tags] 
     * @param {string} [_options] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsExport(id: number, language: string, type: ProjectsExportTypeEnum, apiToken?: string, filters?: string, order?: string, tags?: string, _options?: string, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsExport(id, language, type, apiToken, filters, order, tags, _options, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Projects. More details in the [documentation](https://poeditor.com/docs/api#projects_list).
     * @summary Returns the list of projects owned by user.
     * @param {string} apiToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsList(apiToken: string, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsList(apiToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sync Terms. More details in the [documentation](https://poeditor.com/docs/api#projects_sync).
     * @summary Syncs your project with the array you send (terms that are not found in the JSON object will be deleted from project and the new ones added). Please use with caution. If wrong data is sent, existing terms and their translations might be irreversibly lost.
     * @param {number} id 
     * @param {string} data JSON format
     * @param {string} [apiToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsSync(id: number, data: string, apiToken?: string, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsSync(id, data, apiToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Project Settings. More details in the [documentation](https://poeditor.com/docs/api#projects_update).
     * @summary Updates project settings (name, description, reference language, fallback language). If optional parameters are not sent, their respective fields are not updated.
     * @param {number} id 
     * @param {string} [apiToken] 
     * @param {string} [name] 
     * @param {string} [description] 
     * @param {string} [referenceLanguage] 
     * @param {string} [fallbackLanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsUpdate(id: number, apiToken?: string, name?: string, description?: string, referenceLanguage?: string, fallbackLanguage?: string, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsUpdate(id, apiToken, name, description, referenceLanguage, fallbackLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload. More details in the [documentation](https://poeditor.com/docs/api#projects_upload).
     * @summary Updates terms / translations - No more than one request every 20 seconds.
     * @param {ProjectsUploadUpdatingEnum} updating 
     * @param {File} file Uploaded file (.po, .xls or any of the supported file formats)
     * @param {string} [apiToken] 
     * @param {number} [id] 
     * @param {string} [language] The language code (Required only if &#x60;updating&#x60; is terms_translations or translations)
     * @param {ProjectsUploadOverwriteEnum} [overwrite] Set it to 1 if you want to overwrite translations
     * @param {ProjectsUploadSyncTermsEnum} [syncTerms] Set it to 1 if you want to sync your terms (terms that are not found in the uploaded file will be deleted from project and the new ones added). Ignored if &#x60;updating&#x60; &#x3D; translations.
     * @param {string} [tags] Add tags to the project terms; available when updating terms or terms_translations; you can use the following keys: \\\&quot;all\\\&quot; - for the all the imported terms, \\\&quot;new\\\&quot; - for the terms which arent already in the project, \\\&quot;obsolete\\\&quot; - for the terms which are in the project but not in the imported file and \\\&quot;overwritten_translations\\\&quot; - for the terms for which translations change
     * @param {ProjectsUploadReadFromSourceEnum} [readFromSource] For .xliff format only - set it to 1 if you want to import translations from the source tag
     * @param {ProjectsUploadFuzzyTriggerEnum} [fuzzyTrigger] Set it to 1 to mark corresponding translations from the other languages as fuzzy for the updated values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsUpload(updating: ProjectsUploadUpdatingEnum, file: File, apiToken?: string, id?: number, language?: string, overwrite?: ProjectsUploadOverwriteEnum, syncTerms?: ProjectsUploadSyncTermsEnum, tags?: string, readFromSource?: ProjectsUploadReadFromSourceEnum, fuzzyTrigger?: ProjectsUploadFuzzyTriggerEnum, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsUpload(updating, file, apiToken, id, language, overwrite, syncTerms, tags, readFromSource, fuzzyTrigger, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * View Project Details. More details in the [documentation](https://poeditor.com/docs/api#projects_view).
     * @summary Returns projects details
     * @param {number} id 
     * @param {string} [apiToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsView(id: number, apiToken?: string, options?: RawAxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsView(id, apiToken, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ProjectsExportTypeEnum = {
    Arb: 'arb',
    Csv: 'csv',
    Ini: 'ini',
    KeyValueJson: 'key_value_json',
    I18next: 'i18next',
    Json: 'json',
    Po: 'po',
    Pot: 'pot',
    Mo: 'mo',
    Properties: 'properties',
    Resw: 'resw',
    Resx: 'resx',
    Ts: 'ts',
    AppleStrings: 'apple_strings',
    Xliff: 'xliff',
    Xliff12: 'xliff_1_2',
    Xlf: 'xlf',
    Xmb: 'xmb',
    Xtb: 'xtb',
    Rise360Xliff: 'rise_360_xliff',
    Xls: 'xls',
    Xlsx: 'xlsx',
    AndroidStrings: 'android_strings',
    Yml: 'yml',
    Php: 'php'
} as const;
export type ProjectsExportTypeEnum = typeof ProjectsExportTypeEnum[keyof typeof ProjectsExportTypeEnum];
/**
 * @export
 */
export const ProjectsUploadUpdatingEnum = {
    Terms: 'terms',
    Translations: 'translations',
    TermsTranslations: 'terms_translations'
} as const;
export type ProjectsUploadUpdatingEnum = typeof ProjectsUploadUpdatingEnum[keyof typeof ProjectsUploadUpdatingEnum];
/**
 * @export
 */
export const ProjectsUploadOverwriteEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type ProjectsUploadOverwriteEnum = typeof ProjectsUploadOverwriteEnum[keyof typeof ProjectsUploadOverwriteEnum];
/**
 * @export
 */
export const ProjectsUploadSyncTermsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type ProjectsUploadSyncTermsEnum = typeof ProjectsUploadSyncTermsEnum[keyof typeof ProjectsUploadSyncTermsEnum];
/**
 * @export
 */
export const ProjectsUploadReadFromSourceEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type ProjectsUploadReadFromSourceEnum = typeof ProjectsUploadReadFromSourceEnum[keyof typeof ProjectsUploadReadFromSourceEnum];
/**
 * @export
 */
export const ProjectsUploadFuzzyTriggerEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type ProjectsUploadFuzzyTriggerEnum = typeof ProjectsUploadFuzzyTriggerEnum[keyof typeof ProjectsUploadFuzzyTriggerEnum];


/**
 * TermsApi - axios parameter creator
 * @export
 */
export const TermsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_add).
         * @summary Adds terms to project.
         * @param {number} id 
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsAdd: async (id: number, data: string, apiToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('termsAdd', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('termsAdd', 'data', data)
            const localVarPath = `/terms/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (data !== undefined) { 
                localVarFormParams.set('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add Comment. More details in the [documentation](https://poeditor.com/docs/api#terms_add_comment).
         * @summary Adds comments to existing terms.
         * @param {number} id 
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsAddComment: async (id: number, data: string, apiToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('termsAddComment', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('termsAddComment', 'data', data)
            const localVarPath = `/terms/add_comment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (data !== undefined) { 
                localVarFormParams.set('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_delete).
         * @summary Deletes terms from project.
         * @param {number} id 
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsDelete: async (id: number, data: string, apiToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('termsDelete', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('termsDelete', 'data', data)
            const localVarPath = `/terms/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (data !== undefined) { 
                localVarFormParams.set('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Project Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_list).
         * @summary Returns project\'s terms and translations if the argument language is provided.
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {string} [language] The language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsList: async (id: number, apiToken?: string, language?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('termsList', 'id', id)
            const localVarPath = `/terms/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.set('language', language as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_update).
         * @summary Updates project terms. Lets you change the text, context, reference, plural and tags.
         * @param {number} id 
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {TermsUpdateFuzzyTriggerEnum} [fuzzyTrigger] Set it to 1 to mark corresponding translations from the other languages as fuzzy for the updated values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsUpdate: async (id: number, data: string, apiToken?: string, fuzzyTrigger?: TermsUpdateFuzzyTriggerEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('termsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('termsUpdate', 'data', data)
            const localVarPath = `/terms/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (data !== undefined) { 
                localVarFormParams.set('data', data as any);
            }
    
            if (fuzzyTrigger !== undefined) { 
                localVarFormParams.set('fuzzy_trigger', fuzzyTrigger as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TermsApi - functional programming interface
 * @export
 */
export const TermsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TermsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_add).
         * @summary Adds terms to project.
         * @param {number} id 
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async termsAdd(id: number, data: string, apiToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermAddedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.termsAdd(id, data, apiToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TermsApi.termsAdd']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add Comment. More details in the [documentation](https://poeditor.com/docs/api#terms_add_comment).
         * @summary Adds comments to existing terms.
         * @param {number} id 
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async termsAddComment(id: number, data: string, apiToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermAddCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.termsAddComment(id, data, apiToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TermsApi.termsAddComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_delete).
         * @summary Deletes terms from project.
         * @param {number} id 
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async termsDelete(id: number, data: string, apiToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermDeletedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.termsDelete(id, data, apiToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TermsApi.termsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List Project Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_list).
         * @summary Returns project\'s terms and translations if the argument language is provided.
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {string} [language] The language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async termsList(id: number, apiToken?: string, language?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsListFullResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.termsList(id, apiToken, language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TermsApi.termsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_update).
         * @summary Updates project terms. Lets you change the text, context, reference, plural and tags.
         * @param {number} id 
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {TermsUpdateFuzzyTriggerEnum} [fuzzyTrigger] Set it to 1 to mark corresponding translations from the other languages as fuzzy for the updated values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async termsUpdate(id: number, data: string, apiToken?: string, fuzzyTrigger?: TermsUpdateFuzzyTriggerEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermUpdatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.termsUpdate(id, data, apiToken, fuzzyTrigger, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TermsApi.termsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TermsApi - factory interface
 * @export
 */
export const TermsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TermsApiFp(configuration)
    return {
        /**
         * Add Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_add).
         * @summary Adds terms to project.
         * @param {number} id 
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsAdd(id: number, data: string, apiToken?: string, options?: any): AxiosPromise<TermAddedResponse> {
            return localVarFp.termsAdd(id, data, apiToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Comment. More details in the [documentation](https://poeditor.com/docs/api#terms_add_comment).
         * @summary Adds comments to existing terms.
         * @param {number} id 
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsAddComment(id: number, data: string, apiToken?: string, options?: any): AxiosPromise<TermAddCommentResponse> {
            return localVarFp.termsAddComment(id, data, apiToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_delete).
         * @summary Deletes terms from project.
         * @param {number} id 
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsDelete(id: number, data: string, apiToken?: string, options?: any): AxiosPromise<TermDeletedResponse> {
            return localVarFp.termsDelete(id, data, apiToken, options).then((request) => request(axios, basePath));
        },
        /**
         * List Project Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_list).
         * @summary Returns project\'s terms and translations if the argument language is provided.
         * @param {number} id 
         * @param {string} [apiToken] 
         * @param {string} [language] The language code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsList(id: number, apiToken?: string, language?: string, options?: any): AxiosPromise<TermsListFullResponse> {
            return localVarFp.termsList(id, apiToken, language, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_update).
         * @summary Updates project terms. Lets you change the text, context, reference, plural and tags.
         * @param {number} id 
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {TermsUpdateFuzzyTriggerEnum} [fuzzyTrigger] Set it to 1 to mark corresponding translations from the other languages as fuzzy for the updated values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsUpdate(id: number, data: string, apiToken?: string, fuzzyTrigger?: TermsUpdateFuzzyTriggerEnum, options?: any): AxiosPromise<TermUpdatedResponse> {
            return localVarFp.termsUpdate(id, data, apiToken, fuzzyTrigger, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TermsApi - object-oriented interface
 * @export
 * @class TermsApi
 * @extends {BaseAPI}
 */
export class TermsApi extends BaseAPI {
    /**
     * Add Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_add).
     * @summary Adds terms to project.
     * @param {number} id 
     * @param {string} data JSON format
     * @param {string} [apiToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsApi
     */
    public termsAdd(id: number, data: string, apiToken?: string, options?: RawAxiosRequestConfig) {
        return TermsApiFp(this.configuration).termsAdd(id, data, apiToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add Comment. More details in the [documentation](https://poeditor.com/docs/api#terms_add_comment).
     * @summary Adds comments to existing terms.
     * @param {number} id 
     * @param {string} data JSON format
     * @param {string} [apiToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsApi
     */
    public termsAddComment(id: number, data: string, apiToken?: string, options?: RawAxiosRequestConfig) {
        return TermsApiFp(this.configuration).termsAddComment(id, data, apiToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_delete).
     * @summary Deletes terms from project.
     * @param {number} id 
     * @param {string} data JSON format
     * @param {string} [apiToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsApi
     */
    public termsDelete(id: number, data: string, apiToken?: string, options?: RawAxiosRequestConfig) {
        return TermsApiFp(this.configuration).termsDelete(id, data, apiToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Project Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_list).
     * @summary Returns project\'s terms and translations if the argument language is provided.
     * @param {number} id 
     * @param {string} [apiToken] 
     * @param {string} [language] The language code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsApi
     */
    public termsList(id: number, apiToken?: string, language?: string, options?: RawAxiosRequestConfig) {
        return TermsApiFp(this.configuration).termsList(id, apiToken, language, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Terms. More details in the [documentation](https://poeditor.com/docs/api#terms_update).
     * @summary Updates project terms. Lets you change the text, context, reference, plural and tags.
     * @param {number} id 
     * @param {string} data JSON format
     * @param {string} [apiToken] 
     * @param {TermsUpdateFuzzyTriggerEnum} [fuzzyTrigger] Set it to 1 to mark corresponding translations from the other languages as fuzzy for the updated values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsApi
     */
    public termsUpdate(id: number, data: string, apiToken?: string, fuzzyTrigger?: TermsUpdateFuzzyTriggerEnum, options?: RawAxiosRequestConfig) {
        return TermsApiFp(this.configuration).termsUpdate(id, data, apiToken, fuzzyTrigger, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const TermsUpdateFuzzyTriggerEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type TermsUpdateFuzzyTriggerEnum = typeof TermsUpdateFuzzyTriggerEnum[keyof typeof TermsUpdateFuzzyTriggerEnum];


/**
 * TranslationsApi - axios parameter creator
 * @export
 */
export const TranslationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_add).
         * @summary Adds translations to project. If translation exists, it will not overwrite it.
         * @param {number} id 
         * @param {string} language The language code
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationsAdd: async (id: number, language: string, data: string, apiToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('translationsAdd', 'id', id)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('translationsAdd', 'language', language)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('translationsAdd', 'data', data)
            const localVarPath = `/translations/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.set('language', language as any);
            }
    
            if (data !== undefined) { 
                localVarFormParams.set('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_automatic).
         * @summary Updates existing translations.
         * @param {number} id 
         * @param {TranslationsAutomaticProviderEnum} provider 
         * @param {string} [apiToken] 
         * @param {string} [sourceLanguage] The language code
         * @param {string} [providerSourceLanguage] The language code
         * @param {string} [targetLanguages] A JSON of the languages to translate to
         * @param {string} [_options] A JSON of the advanced options you want to use with the selected provider. Possible options include the POEditor tag of the strings you want to send for translation and some provider-specific options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationsAutomatic: async (id: number, provider: TranslationsAutomaticProviderEnum, apiToken?: string, sourceLanguage?: string, providerSourceLanguage?: string, targetLanguages?: string, _options?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('translationsAutomatic', 'id', id)
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('translationsAutomatic', 'provider', provider)
            const localVarPath = `/translations/automatic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (sourceLanguage !== undefined) { 
                localVarFormParams.set('source_language', sourceLanguage as any);
            }
    
            if (providerSourceLanguage !== undefined) { 
                localVarFormParams.set('provider_source_language', providerSourceLanguage as any);
            }
    
            if (provider !== undefined) { 
                localVarFormParams.set('provider', provider as any);
            }
    
            if (targetLanguages !== undefined) { 
                localVarFormParams.set('target_languages', targetLanguages as any);
            }
    
            if (_options !== undefined) { 
                localVarFormParams.set('options', _options as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_delete).
         * @summary Deletes translations from specified language.
         * @param {number} id 
         * @param {string} language The language code
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationsDelete: async (id: number, language: string, data: string, apiToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('translationsDelete', 'id', id)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('translationsDelete', 'language', language)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('translationsDelete', 'data', data)
            const localVarPath = `/translations/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.set('language', language as any);
            }
    
            if (data !== undefined) { 
                localVarFormParams.set('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_update).
         * @summary Updates existing translations.
         * @param {number} id 
         * @param {string} language The language code
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationsUpdate: async (id: number, language: string, data: string, apiToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('translationsUpdate', 'id', id)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('translationsUpdate', 'language', language)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('translationsUpdate', 'data', data)
            const localVarPath = `/translations/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (apiToken !== undefined) { 
                localVarFormParams.set('api_token', apiToken as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.set('language', language as any);
            }
    
            if (data !== undefined) { 
                localVarFormParams.set('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TranslationsApi - functional programming interface
 * @export
 */
export const TranslationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TranslationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_add).
         * @summary Adds translations to project. If translation exists, it will not overwrite it.
         * @param {number} id 
         * @param {string} language The language code
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async translationsAdd(id: number, language: string, data: string, apiToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TranslationAddedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.translationsAdd(id, language, data, apiToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TranslationsApi.translationsAdd']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_automatic).
         * @summary Updates existing translations.
         * @param {number} id 
         * @param {TranslationsAutomaticProviderEnum} provider 
         * @param {string} [apiToken] 
         * @param {string} [sourceLanguage] The language code
         * @param {string} [providerSourceLanguage] The language code
         * @param {string} [targetLanguages] A JSON of the languages to translate to
         * @param {string} [_options] A JSON of the advanced options you want to use with the selected provider. Possible options include the POEditor tag of the strings you want to send for translation and some provider-specific options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async translationsAutomatic(id: number, provider: TranslationsAutomaticProviderEnum, apiToken?: string, sourceLanguage?: string, providerSourceLanguage?: string, targetLanguages?: string, _options?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TranslationAutomatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.translationsAutomatic(id, provider, apiToken, sourceLanguage, providerSourceLanguage, targetLanguages, _options, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TranslationsApi.translationsAutomatic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_delete).
         * @summary Deletes translations from specified language.
         * @param {number} id 
         * @param {string} language The language code
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async translationsDelete(id: number, language: string, data: string, apiToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TranslationDeletedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.translationsDelete(id, language, data, apiToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TranslationsApi.translationsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_update).
         * @summary Updates existing translations.
         * @param {number} id 
         * @param {string} language The language code
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async translationsUpdate(id: number, language: string, data: string, apiToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TranslationUpdatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.translationsUpdate(id, language, data, apiToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TranslationsApi.translationsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TranslationsApi - factory interface
 * @export
 */
export const TranslationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TranslationsApiFp(configuration)
    return {
        /**
         * Add Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_add).
         * @summary Adds translations to project. If translation exists, it will not overwrite it.
         * @param {number} id 
         * @param {string} language The language code
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationsAdd(id: number, language: string, data: string, apiToken?: string, options?: any): AxiosPromise<TranslationAddedResponse> {
            return localVarFp.translationsAdd(id, language, data, apiToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_automatic).
         * @summary Updates existing translations.
         * @param {number} id 
         * @param {TranslationsAutomaticProviderEnum} provider 
         * @param {string} [apiToken] 
         * @param {string} [sourceLanguage] The language code
         * @param {string} [providerSourceLanguage] The language code
         * @param {string} [targetLanguages] A JSON of the languages to translate to
         * @param {string} [_options] A JSON of the advanced options you want to use with the selected provider. Possible options include the POEditor tag of the strings you want to send for translation and some provider-specific options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationsAutomatic(id: number, provider: TranslationsAutomaticProviderEnum, apiToken?: string, sourceLanguage?: string, providerSourceLanguage?: string, targetLanguages?: string, _options?: string, options?: any): AxiosPromise<TranslationAutomatedResponse> {
            return localVarFp.translationsAutomatic(id, provider, apiToken, sourceLanguage, providerSourceLanguage, targetLanguages, _options, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_delete).
         * @summary Deletes translations from specified language.
         * @param {number} id 
         * @param {string} language The language code
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationsDelete(id: number, language: string, data: string, apiToken?: string, options?: any): AxiosPromise<TranslationDeletedResponse> {
            return localVarFp.translationsDelete(id, language, data, apiToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_update).
         * @summary Updates existing translations.
         * @param {number} id 
         * @param {string} language The language code
         * @param {string} data JSON format
         * @param {string} [apiToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translationsUpdate(id: number, language: string, data: string, apiToken?: string, options?: any): AxiosPromise<TranslationUpdatedResponse> {
            return localVarFp.translationsUpdate(id, language, data, apiToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TranslationsApi - object-oriented interface
 * @export
 * @class TranslationsApi
 * @extends {BaseAPI}
 */
export class TranslationsApi extends BaseAPI {
    /**
     * Add Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_add).
     * @summary Adds translations to project. If translation exists, it will not overwrite it.
     * @param {number} id 
     * @param {string} language The language code
     * @param {string} data JSON format
     * @param {string} [apiToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationsApi
     */
    public translationsAdd(id: number, language: string, data: string, apiToken?: string, options?: RawAxiosRequestConfig) {
        return TranslationsApiFp(this.configuration).translationsAdd(id, language, data, apiToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_automatic).
     * @summary Updates existing translations.
     * @param {number} id 
     * @param {TranslationsAutomaticProviderEnum} provider 
     * @param {string} [apiToken] 
     * @param {string} [sourceLanguage] The language code
     * @param {string} [providerSourceLanguage] The language code
     * @param {string} [targetLanguages] A JSON of the languages to translate to
     * @param {string} [_options] A JSON of the advanced options you want to use with the selected provider. Possible options include the POEditor tag of the strings you want to send for translation and some provider-specific options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationsApi
     */
    public translationsAutomatic(id: number, provider: TranslationsAutomaticProviderEnum, apiToken?: string, sourceLanguage?: string, providerSourceLanguage?: string, targetLanguages?: string, _options?: string, options?: RawAxiosRequestConfig) {
        return TranslationsApiFp(this.configuration).translationsAutomatic(id, provider, apiToken, sourceLanguage, providerSourceLanguage, targetLanguages, _options, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_delete).
     * @summary Deletes translations from specified language.
     * @param {number} id 
     * @param {string} language The language code
     * @param {string} data JSON format
     * @param {string} [apiToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationsApi
     */
    public translationsDelete(id: number, language: string, data: string, apiToken?: string, options?: RawAxiosRequestConfig) {
        return TranslationsApiFp(this.configuration).translationsDelete(id, language, data, apiToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Translations. More details in the [documentation](https://poeditor.com/docs/api#translations_update).
     * @summary Updates existing translations.
     * @param {number} id 
     * @param {string} language The language code
     * @param {string} data JSON format
     * @param {string} [apiToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslationsApi
     */
    public translationsUpdate(id: number, language: string, data: string, apiToken?: string, options?: RawAxiosRequestConfig) {
        return TranslationsApiFp(this.configuration).translationsUpdate(id, language, data, apiToken, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const TranslationsAutomaticProviderEnum = {
    Google: 'google',
    Microsoft: 'microsoft',
    Deepl: 'deepl'
} as const;
export type TranslationsAutomaticProviderEnum = typeof TranslationsAutomaticProviderEnum[keyof typeof TranslationsAutomaticProviderEnum];


